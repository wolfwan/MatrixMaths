/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import domain.Matrices;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import service.*;

/**
 *
 * @author wolf
 */
public class SHL extends javax.swing.JFrame {

    private GUI gui;
    private double[][] productMat;
    private double[][] matC;
    private int rows;

    /**
     * Creates new form SHL
     */
    public SHL(GUI gui) {
        //this.gui = new GUI();
        initComponents();
        //private GUI gui;
        this.gui = gui;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matrixCFld = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        SHLButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter the matrix to add, seperated by commas");

        SHLButton.setText("Submit");
        SHLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHLButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SHLButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(matrixCFld)))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(matrixCFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SHLButton)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SHLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHLButtonActionPerformed

        IMatrix add = new MatrixImpl();
        String matCValues = matrixCFld.getText();

        Matrices maxOut = new Matrices();
        Matrices maxC = new Matrices();
        Matrices maxGUI = new Matrices();


        maxC.setRows(gui.getShlSize());
        maxC.setColumns(1);
        maxGUI.setRows(gui.getShlSize());
        maxGUI.setColumns(1);
        maxGUI.setMatrix(gui.getSHLMatrix());
        maxOut.setRows(gui.getShlSize());
        maxOut.setColumns(1);

        //getting theta matrix
        try {
            maxC.setMatrix(add.setMatrix(matCValues, maxC.getRows(), maxC.getColumns()));
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex + " (in matrix C)");
        }

        //adding product matrix and theta matrix together
        try {
            maxOut.setMatrix(add.add(maxC.getMatrix(), maxGUI.getMatrix(), gui.getShlSize(), 1));
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }


        //printing product Matrix for JFrame
        StringBuilder bufOut = new StringBuilder();
        bufOut.append("<html>{");
        for (int i = 0; i < maxOut.getRows(); i++) {
            if (i != 0) {
                bufOut.append("} <br> {");
            }
            for (int j = 0; j < maxOut.getColumns(); j++) {
                bufOut.append(maxOut.getMatrix()[i][j]).append("    ");
            }
        }
        bufOut.append("}</html>");

        String strOut = bufOut.toString();

        int OutXSize = maxOut.getColumns() * 40;
        int OutYSize = maxOut.getRows() * 40 + 10;


        JFrame matOutFrm = new JFrame("Sum Matrix");
        JLabel matOutLab = new JLabel(strOut, SwingConstants.CENTER);
        matOutFrm.add(matOutLab);
        matOutFrm.setTitle("Sum Matrix");
        matOutFrm.setLocation(0, 375);
        matOutFrm.setSize(OutXSize, OutYSize);
        matOutFrm.setVisible(true);


        //printing the IO matrix for JFrame
        StringBuilder bufIO = new StringBuilder();
        bufIO.append("<html>{");
        for (int i = 0; i < maxOut.getRows(); i++) {
            if (i != 0) {
                bufIO.append("} <br> {");
            }
            for (int j = 0; j < maxOut.getColumns(); j++) {

                if (maxOut.getMatrix()[i][j] >= 0) {
                    bufIO.append(1).append("    ");
                } else {
                    bufIO.append(-1).append("    ");
                }
                //bufIO.append(maxOut.getMatrix()[i][j]).append("    ");
            }
        }
        bufIO.append("}</html>");

        String strIO = bufIO.toString();

        int IOXSize = maxOut.getColumns() * 40;
        int IOYSize = maxOut.getRows() * 40 + 10;


        JFrame matIOFrm = new JFrame("IO Matrix");
        JLabel matIOLab = new JLabel(strIO, SwingConstants.CENTER);
        matIOFrm.add(matIOLab);
        matIOFrm.setTitle("IO Matrix");
        matIOFrm.setLocation(300, 375);
        matIOFrm.setSize(OutXSize, IOYSize);
        matIOFrm.setVisible(true);

        //just printing the array for reference
        System.out.println("Printing Final Matrix");
        for (int i = 0; i < maxOut.getRows(); i++) {
            for (int j = 0; j < maxOut.getColumns(); j++) {
                if (maxOut.getMatrix()[i][j] >= 0) {
                    System.out.print("1 ");
                } else {
                    System.out.print("-1 ");
                }
            }
            System.out.println();
        }


        this.setVisible(false);
        gui.setVisible(true);

    }//GEN-LAST:event_SHLButtonActionPerformed
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SHL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SHL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SHL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SHL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new SHL().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SHLButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField matrixCFld;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the productMat
     */
    public double[][] getProductMat() {
        return productMat;
    }

    /**
     * @param productMat the productMat to set
     */
    public void setProductMat(double[][] productMat) {
        this.productMat = productMat;
    }

    /**
     * @return the matC
     */
    public double[][] getMatC() {
        return matC;
    }

    /**
     * @param matC the matC to set
     */
    public void setMatC(double[][] matC) {
        this.matC = matC;
    }

    /**
     * @return the rows
     */
    public int getRows() {
        return rows;
    }

    /**
     * @param rows the rows to set
     */
    public void setRows(int rows) {
        this.rows = rows;
    }
}
