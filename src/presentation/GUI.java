/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on Apr 8, 2015, 3:20:30 PM
 */
package presentation;

import service.*;
import domain.Matrices;
import javax.swing.*;

/**
 *
 * @author khwaj449
 */
public class GUI extends javax.swing.JFrame {

    private int shlSize;
    private double[][] SHLMatrix;

    /**
     * Creates new form NewJFrame
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        matrixAFld = new java.awt.TextField();
        matrixBFld = new java.awt.TextField();
        MultiButton = new javax.swing.JButton();
        CancleBtn = new javax.swing.JButton();
        MatASize = new javax.swing.JTextField();
        MatABSize = new javax.swing.JTextField();
        MatBSize = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        SHLButton = new javax.swing.JButton();
        MakeBtn = new javax.swing.JButton();

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        matrixAFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixAFldActionPerformed(evt);
            }
        });

        MultiButton.setText("Multiply");
        MultiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultiButtonActionPerformed(evt);
            }
        });

        CancleBtn.setText("Exit");
        CancleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancleBtnActionPerformed(evt);
            }
        });

        MatASize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MatASizeActionPerformed(evt);
            }
        });

        jLabel1.setText("Rows in Matrix A");

        jLabel2.setText("Collums in Matrix A/Rows in B");

        jLabel3.setText("Collums in Matrix B");

        jLabel4.setText("Matrix A");

        jLabel5.setText("Matrix B");

        jLabel6.setText("Enter matrix data seperated by commas from left to right, top to bottom.");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        SHLButton.setText("SHL");
        SHLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHLButtonActionPerformed(evt);
            }
        });

        MakeBtn.setText("Make Matrices");
        MakeBtn.setPreferredSize(new java.awt.Dimension(100, 25));
        MakeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(MatBSize)
                            .addComponent(MatABSize)
                            .addComponent(MatASize, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(matrixBFld, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(matrixAFld, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(MultiButton)
                                    .addGap(38, 38, 38)
                                    .addComponent(addButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                    .addComponent(SHLButton)
                                    .addGap(47, 47, 47)
                                    .addComponent(CancleBtn)))
                            .addComponent(jLabel6)
                            .addComponent(MakeBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MatASize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MatABSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MatBSize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(matrixAFld, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matrixBFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(MakeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MultiButton)
                    .addComponent(addButton)
                    .addComponent(SHLButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void CancleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancleBtnActionPerformed
    System.exit(0);

}//GEN-LAST:event_CancleBtnActionPerformed

private void matrixAFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixAFldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_matrixAFldActionPerformed

private void MultiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultiButtonActionPerformed

    //setting up matrices using information on form
    IMatrix add = new MatrixImpl();
    Matrices maxA = new Matrices();
    Matrices maxB = new Matrices();
    Matrices maxOut = new Matrices();

    int matASizeIn = Integer.parseInt(MatASize.getText());
    int matABSizeIn = Integer.parseInt(MatABSize.getText());
    int matBSizeIn = Integer.parseInt(MatBSize.getText());

    maxA.setRows(matASizeIn);
    maxA.setColumns(matABSizeIn);
    maxB.setRows(matABSizeIn);
    maxB.setColumns(matBSizeIn);
    maxOut.setRows(matASizeIn);
    maxOut.setColumns(matBSizeIn);

    String matAValues = matrixAFld.getText();
    String matBValues = matrixBFld.getText();

    //System.out.println("matrix A values: " + matAValues);
    //System.out.println("matrix B values: " + matBValues);
    //setting matrices values using service layer
    try {
        maxA.setMatrix(add.setMatrix(matAValues, maxA.getRows(), maxA.getColumns()));
    } catch (ServiceException ex) {
        JOptionPane.showMessageDialog(this, ex);

    }
    try {
        maxB.setMatrix(add.setMatrix(matBValues, maxB.getRows(), maxB.getColumns()));
    } catch (ServiceException ex) {
        JOptionPane.showMessageDialog(this, ex);
    }

    //adding them together
    try {
        maxOut.setMatrix(add.multiply(maxA.getMatrix(), maxB.getMatrix(), maxOut.getRows(), maxA.getColumns(), maxOut.getColumns()));
    } catch (ServiceException ex) {
        JOptionPane.showMessageDialog(this, ex);
    }

    //printing Matrix A for JFrame
    StringBuilder bufOut = new StringBuilder();
    bufOut.append("<html> { ");
    for (int i = 0; i < maxOut.getRows(); i++) {
        if(i != 0){
                bufOut.append("} <br> {");
        }
        for (int j = 0; j < maxOut.getColumns(); j++) {
            bufOut.append(maxOut.getMatrix()[i][j]).append(",    ");
        }

    }
    bufOut.append("} </html>");

    String strOut = bufOut.toString();

    int OutXSize = maxOut.getColumns() * 40;
    int OutYSize = maxOut.getRows() * 40 + 10;


    JFrame matOutFrm = new JFrame("Product Matrix");
    JLabel matOutLab = new JLabel(strOut, SwingConstants.CENTER);
    matOutFrm.add(matOutLab);
    matOutFrm.setTitle("Product Matrix");
    matOutFrm.setLocation(0, 375);
    matOutFrm.setSize(OutXSize, OutYSize);
    matOutFrm.setVisible(true);
//    //printing output into JOptionPane
//    StringBuffer str = new StringBuffer();
//    for (int i = 0; i < maxOut.getRows(); i++) {
//        for (int j = 0; j < maxOut.getColumns(); j++) {
//            str.append(maxOut.getMatrix()[i][j]).append("  ");
//        }
//        str.append("\n");
//    }
//    JOptionPane.showMessageDialog(this, "Your product Matrix is:" + "\n" + str);


}//GEN-LAST:event_MultiButtonActionPerformed

private void MatASizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MatASizeActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_MatASizeActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        //setting up matrices using information on form
        IMatrix add = new MatrixImpl();
        Matrices maxA = new Matrices();
        Matrices maxB = new Matrices();
        Matrices maxOut = new Matrices();

        int matASizeIn = Integer.parseInt(MatASize.getText());
        int matABSizeIn = Integer.parseInt(MatABSize.getText());
        int matBSizeIn = Integer.parseInt(MatBSize.getText());

        maxA.setRows(matASizeIn);
        maxA.setColumns(matABSizeIn);
        maxB.setRows(matASizeIn);
        maxB.setColumns(matABSizeIn);
        maxOut.setRows(matASizeIn);
        maxOut.setColumns(matABSizeIn);

        String matAValues = matrixAFld.getText();
        String matBValues = matrixBFld.getText();

        //System.out.println("matrix A values: " + matAValues);
        //System.out.println("matrix B values: " + matBValues);
        //setting matrices values using service layer
        try {
            maxA.setMatrix(add.setMatrix(matAValues, maxA.getRows(), maxA.getColumns()));
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex);

        }
        try {
            maxB.setMatrix(add.setMatrix(matBValues, maxB.getRows(), maxB.getColumns()));
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

        //adding them together
        try {
            maxOut.setMatrix(add.add(maxA.getMatrix(), maxB.getMatrix(), maxOut.getRows(), maxOut.getColumns()));
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

        //printing Matrix A for JFrame
        StringBuilder bufOut = new StringBuilder();
        bufOut.append("<html>{");
        for (int i = 0; i < maxOut.getRows(); i++) {
                    if(i != 0){
                bufOut.append("} <br> {");
        }
            for (int j = 0; j < maxOut.getColumns(); j++) {
                bufOut.append(maxOut.getMatrix()[i][j]).append("    ");
            }
        }
        bufOut.append("} </html>");

        String strOut = bufOut.toString();

        int OutXSize = maxOut.getColumns() * 40;
        int OutYSize = maxOut.getRows() * 40 + 10;


        JFrame matOutFrm = new JFrame("Sum Matrix");
        JLabel matOutLab = new JLabel(strOut, SwingConstants.CENTER);
        matOutFrm.add(matOutLab);
        matOutFrm.setTitle("Sum Matrix");
        matOutFrm.setLocation(0, 375);
        matOutFrm.setSize(OutXSize, OutYSize);
        matOutFrm.setVisible(true);

        //printing output into JOptionPane
//        StringBuffer str = new StringBuffer();
//        for (int i = 0; i < maxOut.getRows(); i++) {
//            for (int j = 0; j < maxOut.getColumns(); j++) {
//                str.append(maxOut.getMatrix()[i][j]).append("  ");
//            }
//            str.append("\n");
//        }
        //JOptionPane.showMessageDialog(this, "Your sum Matrix is:" + "\n" + str);

        //just printing the array for reference
//        System.out.println("Printing Final Matrix");
//        for (int i = 0; i < getFinalMatrix().length; i++) {
//            for (int j = 0; j < getFinalMatrix()[i].length; j++) {
//                System.out.print(getFinalMatrix()[i][j] + " ");
//            }
//            System.out.println();
//        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void SHLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHLButtonActionPerformed
        
        //setting up matrices using information on form
        IMatrix add = new MatrixImpl();
        Matrices maxA = new Matrices();
        Matrices maxB = new Matrices();
        Matrices maxOut = new Matrices();

        int matASizeIn = Integer.parseInt(MatASize.getText());
        int matABSizeIn = Integer.parseInt(MatABSize.getText());
        int matBSizeIn = Integer.parseInt(MatBSize.getText());

        maxA.setRows(matASizeIn);
        maxA.setColumns(matABSizeIn);
        maxB.setRows(matABSizeIn);
        maxB.setColumns(matBSizeIn);
        maxOut.setRows(matASizeIn);
        maxOut.setColumns(matBSizeIn);

        String matAValues = matrixAFld.getText();
        String matBValues = matrixBFld.getText();

        //System.out.println("matrix A values: " + matAValues);
        //System.out.println("matrix B values: " + matBValues);
        //setting matrices values using service layer
        try {
            maxA.setMatrix(add.setMatrix(matAValues, maxA.getRows(), maxA.getColumns()));
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex);

        }
        try {
            maxB.setMatrix(add.setMatrix(matBValues, maxB.getRows(), maxB.getColumns()));
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

        //multiplying them together
        try {
            maxOut.setMatrix(add.multiply(maxA.getMatrix(), maxB.getMatrix(), maxOut.getRows(), maxA.getColumns(), maxB.getColumns()));
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

        //printing Matrix A for JFrame
        StringBuilder bufOut = new StringBuilder();
        bufOut.append("<html>{");
        for (int i = 0; i < maxOut.getRows(); i++) {
                    if(i != 0){
                bufOut.append("} <br> {");
        }
            for (int j = 0; j < maxOut.getColumns(); j++) {
                bufOut.append(maxOut.getMatrix()[i][j]).append("    ");
            }
        }
        bufOut.append("}</html>");

        String strOut = bufOut.toString();
        System.out.println(strOut);

        int OutXSize = maxOut.getColumns() * 40;
        int OutYSize = maxOut.getRows() * 40 + 10;


        JFrame matOutFrm = new JFrame("Sum Matrix");
        JLabel matOutLab = new JLabel(strOut, SwingConstants.CENTER);
        matOutFrm.add(matOutLab);
        matOutFrm.setTitle("Sum Matrix");
        matOutFrm.setLocation(0, 375);
        matOutFrm.setSize(OutXSize, OutYSize);
        matOutFrm.setVisible(true);

        setSHLMatrix(maxOut.getMatrix());
        shlSize = maxA.getRows();
        setVisible(false);
        new SHL(this).setVisible(true);


    }//GEN-LAST:event_SHLButtonActionPerformed

    private void MakeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeBtnActionPerformed

        //setting up matrices using information on form
        IMatrix add = new MatrixImpl();
        Matrices maxA = new Matrices();
        Matrices maxB = new Matrices();
        Matrices maxOut = new Matrices();

        int matASizeIn = Integer.parseInt(MatASize.getText());
        int matABSizeIn = Integer.parseInt(MatABSize.getText());
        int matBSizeIn = Integer.parseInt(MatBSize.getText());

        maxA.setRows(matASizeIn);
        maxA.setColumns(matABSizeIn);
        maxB.setRows(matABSizeIn);
        maxB.setColumns(matBSizeIn);

        String matAValues = matrixAFld.getText();
        String matBValues = matrixBFld.getText();

        //System.out.println("matrix A values: " + matAValues);
        //System.out.println("matrix B values: " + matBValues);
        //setting matrices values using service layer
        try {
            maxA.setMatrix(add.setMatrix(matAValues, maxA.getRows(), maxA.getColumns()));
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex);

        }
        try {
            maxB.setMatrix(add.setMatrix(matBValues, maxB.getRows(), maxB.getColumns()));
        } catch (ServiceException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

        //printing Matrix A for JFrame
        StringBuilder bufA = new StringBuilder();
        bufA.append("<html>{");
        for (int i = 0; i < maxA.getRows(); i++) {
                    if(i != 0){
                bufA.append("} <br> {");
        }
            for (int j = 0; j < maxA.getColumns(); j++) {
                bufA.append(maxA.getMatrix()[i][j]).append("    ");
            }
        }
        bufA.append("}</html>");

        String strA = bufA.toString();

        System.out.println(strA);

        //printing Matrix B for JFrame
        StringBuffer bufB = new StringBuffer();
        bufB.append("<html>{");
        for (int i = 0; i < maxB.getRows(); i++) {
                    if(i != 0){
                bufB.append("} <br> {");
        }
            for (int j = 0; j < maxB.getColumns(); j++) {
                bufB.append(maxB.getMatrix()[i][j]).append("    ");
            }
        }
        bufB.append("}</html>");
        String strB = bufB.toString();

        int AXSize = maxA.getColumns() * 40;
        int BXSize = maxB.getColumns() * 40;
        int AYSize = maxA.getRows() * 40 + 10;
        int BYSize = maxB.getRows() * 40 + 10;
        int BYLoc = (maxB.getRows() * 40) + 100;


        JFrame matAFrm = new JFrame("Matrix A");
        JFrame matBFrm = new JFrame("Matrix B");
        JLabel matALab = new JLabel(strA, SwingConstants.CENTER);
        JLabel matBLab = new JLabel(strB, SwingConstants.CENTER);
        matAFrm.add(matALab);
        matAFrm.setTitle("Matrix A");
        matBFrm.add(matBLab);
        matBFrm.setTitle("Matrix B");
        matAFrm.setLocation(500, 0);
        matBFrm.setLocation(500, BYLoc);
        matAFrm.setSize(AXSize, AYSize);
        matBFrm.setSize(AYSize, BYSize);
        matAFrm.setVisible(true);
        matBFrm.setVisible(true);


    }//GEN-LAST:event_MakeBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancleBtn;
    private javax.swing.JButton MakeBtn;
    private javax.swing.JTextField MatABSize;
    private javax.swing.JTextField MatASize;
    private javax.swing.JTextField MatBSize;
    private javax.swing.JButton MultiButton;
    private javax.swing.JButton SHLButton;
    private javax.swing.JButton addButton;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private java.awt.TextField matrixAFld;
    private java.awt.TextField matrixBFld;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the MatrixA
     */
    public java.awt.TextField getMatrixA() {
        return matrixAFld;
    }

    /**
     * @return the MatrixB
     */
    public java.awt.TextField getMatrixB() {
        return matrixBFld;
    }

    /**
     * @return the shlSize
     */
    public int getShlSize() {
        return shlSize;
    }

    /**
     * @return the SHLMatrix
     */
    public double[][] getSHLMatrix() {
        return SHLMatrix;
    }

    /**
     * @param SHLMatrix the SHLMatrix to set
     */
    public void setSHLMatrix(double[][] SHLMatrix) {
        this.SHLMatrix = SHLMatrix;
    }
}
